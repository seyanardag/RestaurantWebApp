// <auto-generated />
using System;
using DataAccessLayer.Concrete;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataAccessLayer.Migrations
{
    [DbContext(typeof(signalRContext))]
    [Migration("20240630124307_notificationEntityAdded")]
    partial class notificationEntityAdded
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EntityLayer.Entities.About", b =>
                {
                    b.Property<int>("AboutId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AboutId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImgUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AboutId");

                    b.ToTable("Abouts");

                    b.HasData(
                        new
                        {
                            AboutId = 1,
                            Description = "Lezzet yolculuğunu unutulmaz kılan bir mola arıyorsanız, doğru adrestesiniz. Restoranımız, deneyimli şeflerimizin elinden çıkan benzersiz lezzetlerle dolu bir gastronomi deneyimi sunuyor. Her bir tabak, özenle seçilmiş malzemelerle hazırlanırken, zengin tatlar ve estetik sunumlarla buluşuyor. Misafirperverliğimiz ve kaliteli hizmet anlayışımızla, her ziyaretinizi özel kılmak için buradayız.",
                            ImgUrl = "/images/aboutimages/about-img.png",
                            Title = "Restorantımıza hoşgeldiniz..."
                        });
                });

            modelBuilder.Entity("EntityLayer.Entities.Basket", b =>
                {
                    b.Property<int>("BasketId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BasketId"));

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("RestaurantTableId")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("BasketId");

                    b.HasIndex("ProductId");

                    b.HasIndex("RestaurantTableId");

                    b.ToTable("Baskets");
                });

            modelBuilder.Entity("EntityLayer.Entities.Booking", b =>
                {
                    b.Property<int>("BookingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BookingId"));

                    b.Property<DateTime>("BookingDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("numberOfCustomers")
                        .HasColumnType("int");

                    b.HasKey("BookingId");

                    b.ToTable("Bookings");

                    b.HasData(
                        new
                        {
                            BookingId = 1,
                            BookingDate = new DateTime(2024, 5, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CustomerName = "Mustafa Çilekçi",
                            Email = "mcilekci@gmail.com",
                            Phone = "0543 123 1122",
                            numberOfCustomers = 4
                        },
                        new
                        {
                            BookingId = 2,
                            BookingDate = new DateTime(2024, 6, 28, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CustomerName = "Naz Farklı",
                            Email = "nazfarkli@gmail.com",
                            Phone = "0555 123 1144",
                            numberOfCustomers = 2
                        },
                        new
                        {
                            BookingId = 3,
                            BookingDate = new DateTime(2024, 7, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CustomerName = "Altan Kemal Özden",
                            Email = "altankemal@gmail.com",
                            Phone = "0507 123 5533",
                            numberOfCustomers = 5
                        });
                });

            modelBuilder.Entity("EntityLayer.Entities.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"));

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.HasKey("CategoryId");

                    b.ToTable("Categorys");

                    b.HasData(
                        new
                        {
                            CategoryId = 1,
                            CategoryName = "Hamburger",
                            Status = true
                        },
                        new
                        {
                            CategoryId = 2,
                            CategoryName = "Makarna",
                            Status = true
                        },
                        new
                        {
                            CategoryId = 3,
                            CategoryName = "İçecek",
                            Status = true
                        },
                        new
                        {
                            CategoryId = 4,
                            CategoryName = "Salata",
                            Status = true
                        },
                        new
                        {
                            CategoryId = 5,
                            CategoryName = "Balık",
                            Status = true
                        },
                        new
                        {
                            CategoryId = 6,
                            CategoryName = "Pizza",
                            Status = true
                        });
                });

            modelBuilder.Entity("EntityLayer.Entities.Contact", b =>
                {
                    b.Property<int>("ContactId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ContactId"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ContactId");

                    b.ToTable("Contacts");

                    b.HasData(
                        new
                        {
                            ContactId = 1,
                            Email = "sigranlr@gmail.com",
                            Location = "Konya",
                            Phone = "0543 789 01 23"
                        });
                });

            modelBuilder.Entity("EntityLayer.Entities.DiscountedProduct", b =>
                {
                    b.Property<int>("DiscountedProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DiscountedProductId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DiscountRate")
                        .HasColumnType("int");

                    b.Property<string>("ImgUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DiscountedProductId");

                    b.ToTable("DiscountedProducts");

                    b.HasData(
                        new
                        {
                            DiscountedProductId = 1,
                            Description = "BOŞ",
                            DiscountRate = 20,
                            ImgUrl = "/images/discountedproductsimages/o1.jpg",
                            Title = "Tadımıza Tat Katalım"
                        },
                        new
                        {
                            DiscountedProductId = 2,
                            Description = "BOŞ",
                            DiscountRate = 15,
                            ImgUrl = "/images/discountedproductsimages/o2.jpg",
                            Title = "Haftanın Lezzeti"
                        });
                });

            modelBuilder.Entity("EntityLayer.Entities.Feature", b =>
                {
                    b.Property<int>("FeatureId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FeatureId"));

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FeatureId");

                    b.ToTable("Features");

                    b.HasData(
                        new
                        {
                            FeatureId = 1,
                            Text = "Restoranımızın mutfağında çalışan şeflerimiz, lezzetin sınırlarını zorlayan yaratıcı tarifleriyle tanınıyor. Her biri alanında uzmanlaşmış olan şeflerimiz, en taze ve yerel malzemeleri kullanarak unutulmaz tatlar sunuyor.",
                            Title = "Deneyimli Şeflerden Oluşan Mutfak Ekibi"
                        },
                        new
                        {
                            FeatureId = 2,
                            Text = "Misafirlerimize modern ve zarif bir atmosferde hizmet veriyoruz. Restoranımızın sunduğu şehir manzarası eşliğinde, keyifli bir yemek deneyimi yaşayabilirsiniz. Her detayı özenle tasarlanmış dekorasyonumuz, konforunuz için özel olarak düşünüldü.",
                            Title = "Şık ve Şehir Manzaralı Atmosfer"
                        },
                        new
                        {
                            FeatureId = 3,
                            Text = "Çevre dostu bir yaklaşımla hareket ediyoruz ve sürdürülebilirlik ilkelerine önem veriyoruz. Menümüzde yer alan ürünlerin büyük çoğunluğu yerel tedarikçilerden temin edilirken, doğal ve organik ürünleri tercih ediyoruz. Bu sayede hem sağlığınıza hem de çevreye katkıda bulunuyoruz.",
                            Title = "Sürdürülebilirlik ve Yerel Ürünler"
                        });
                });

            modelBuilder.Entity("EntityLayer.Entities.FooterInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("FooterInfos");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Restoranımızda lezzet ve misafirperverlik buluşuyor. Modern ve şık atmosferimizde, yaratıcı şeflerimizin hazırladığı özenli yemeklerle unutulmaz bir deneyim yaşayın.",
                            Title = "Lezzeti Yaşayın"
                        });
                });

            modelBuilder.Entity("EntityLayer.Entities.MoneyBox", b =>
                {
                    b.Property<int>("MoneyBoxId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MoneyBoxId"));

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("MoneyBoxId");

                    b.ToTable("MoneyBoxes");

                    b.HasData(
                        new
                        {
                            MoneyBoxId = 1,
                            TotalAmount = 100m
                        });
                });

            modelBuilder.Entity("EntityLayer.Entities.Notification", b =>
                {
                    b.Property<int>("NotificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NotificationId"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("NotificationId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("EntityLayer.Entities.OpenHour", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClosingHour")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OpenDays")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OpeningHour")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("OpenHours");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ClosingHour = "21.30",
                            OpenDays = "Pazartesi-Cumartesi",
                            OpeningHour = "09.00"
                        });
                });

            modelBuilder.Entity("EntityLayer.Entities.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TableNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("OrderId");

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            OrderId = 1,
                            Description = "Hesap Kapatıldı",
                            OrderDate = new DateTime(2024, 6, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TableNumber = "Salon 01",
                            TotalPrice = 0m
                        },
                        new
                        {
                            OrderId = 2,
                            Description = "Hesap Kapatıldı",
                            OrderDate = new DateTime(2024, 6, 6, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TableNumber = "Salon 02",
                            TotalPrice = 0m
                        },
                        new
                        {
                            OrderId = 3,
                            Description = "Müşteri Masada",
                            OrderDate = new DateTime(2024, 6, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TableNumber = "Salon 03",
                            TotalPrice = 0m
                        },
                        new
                        {
                            OrderId = 4,
                            Description = "Müşteri Masada",
                            OrderDate = new DateTime(2024, 6, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TableNumber = "Bahçe 01",
                            TotalPrice = 0m
                        });
                });

            modelBuilder.Entity("EntityLayer.Entities.OrderDetail", b =>
                {
                    b.Property<int>("OrderDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderDetailId"));

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("ProductCount")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<decimal>("ProductPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("OrderDetailId");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderDetails");

                    b.HasData(
                        new
                        {
                            OrderDetailId = 1,
                            OrderId = 1,
                            ProductCount = 2,
                            ProductId = 1,
                            ProductPrice = 5m,
                            TotalPrice = 10m
                        },
                        new
                        {
                            OrderDetailId = 2,
                            OrderId = 1,
                            ProductCount = 1,
                            ProductId = 2,
                            ProductPrice = 7m,
                            TotalPrice = 7m
                        },
                        new
                        {
                            OrderDetailId = 3,
                            OrderId = 2,
                            ProductCount = 3,
                            ProductId = 4,
                            ProductPrice = 12m,
                            TotalPrice = 36m
                        });
                });

            modelBuilder.Entity("EntityLayer.Entities.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductId"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImgUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ProductStatus")
                        .HasColumnType("bit");

                    b.HasKey("ProductId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            ProductId = 1,
                            CategoryId = 2,
                            Description = "Spagetti lezzeti",
                            ImgUrl = "/images/productimages/f1.png",
                            Price = 60m,
                            ProductName = "Spagetti",
                            ProductStatus = true
                        },
                        new
                        {
                            ProductId = 2,
                            CategoryId = 3,
                            Description = "Türk markası  kola tercihimiz",
                            ImgUrl = "/images/productimages/f2.png",
                            Price = 15m,
                            ProductName = "Cola Turka",
                            ProductStatus = true
                        },
                        new
                        {
                            ProductId = 3,
                            CategoryId = 3,
                            Description = "Doğa su",
                            ImgUrl = "/images/productimages/f3.png",
                            Price = 2m,
                            ProductName = "Su",
                            ProductStatus = true
                        },
                        new
                        {
                            ProductId = 4,
                            CategoryId = 4,
                            Description = "Akdeniz lezzetlerinin buluştuğu salata",
                            ImgUrl = "/images/productimages/f4.png",
                            Price = 12m,
                            ProductName = "Akdeniz Salatası",
                            ProductStatus = true
                        },
                        new
                        {
                            ProductId = 5,
                            CategoryId = 6,
                            Description = "Nefis 5 farklı çeşit peynirle donanmış pizza",
                            ImgUrl = "/images/productimages/f5.png",
                            Price = 85m,
                            ProductName = "Peynirli Pizza",
                            ProductStatus = true
                        },
                        new
                        {
                            ProductId = 6,
                            CategoryId = 6,
                            Description = "Her lezzet dilimin ucunda olsun diyenlere",
                            ImgUrl = "/images/productimages/f6.png",
                            Price = 80m,
                            ProductName = "Karışık Pizza",
                            ProductStatus = true
                        },
                        new
                        {
                            ProductId = 7,
                            CategoryId = 6,
                            Description = "Sucuk ve pizzanın muhteşem tadına bayılacaksınız",
                            ImgUrl = "/images/productimages/f7.png",
                            Price = 90m,
                            ProductName = "Sucuklu Pizza",
                            ProductStatus = true
                        },
                        new
                        {
                            ProductId = 8,
                            CategoryId = 1,
                            Description = "Doyuracak bir hamburger isteyenlere",
                            ImgUrl = "/images/productimages/f8.png",
                            Price = 70m,
                            ProductName = "Whooper Menü",
                            ProductStatus = true
                        },
                        new
                        {
                            ProductId = 9,
                            CategoryId = 1,
                            Description = "Ben birazcık fazla mı yesem diyenlere",
                            ImgUrl = "/images/productimages/f9.png",
                            Price = 100m,
                            ProductName = "Double Hamburger",
                            ProductStatus = true
                        },
                        new
                        {
                            ProductId = 10,
                            CategoryId = 1,
                            Description = "Ben doyamam büyük sar abi diyenlere",
                            ImgUrl = "/images/productimages/f9.png",
                            Price = 120m,
                            ProductName = "Triple Hamburger",
                            ProductStatus = true
                        },
                        new
                        {
                            ProductId = 11,
                            CategoryId = 5,
                            Description = "Enfes mangalda balık lezzeti damağınızı şenlendirecek",
                            ImgUrl = "/images/productimages/f2.png",
                            Price = 100m,
                            ProductName = "Somon",
                            ProductStatus = true
                        });
                });

            modelBuilder.Entity("EntityLayer.Entities.RestaurantTable", b =>
                {
                    b.Property<int>("RestaurantTableId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RestaurantTableId"));

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("TableName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RestaurantTableId");

                    b.ToTable("RestaurantTables");

                    b.HasData(
                        new
                        {
                            RestaurantTableId = 1,
                            Status = false,
                            TableName = "Masa 1"
                        },
                        new
                        {
                            RestaurantTableId = 2,
                            Status = false,
                            TableName = "Masa 2"
                        },
                        new
                        {
                            RestaurantTableId = 3,
                            Status = false,
                            TableName = "Masa 3"
                        },
                        new
                        {
                            RestaurantTableId = 4,
                            Status = false,
                            TableName = "Masa 4"
                        },
                        new
                        {
                            RestaurantTableId = 5,
                            Status = false,
                            TableName = "Masa 5"
                        },
                        new
                        {
                            RestaurantTableId = 6,
                            Status = false,
                            TableName = "Masa 6"
                        },
                        new
                        {
                            RestaurantTableId = 7,
                            Status = false,
                            TableName = "Bahçe 1"
                        },
                        new
                        {
                            RestaurantTableId = 8,
                            Status = false,
                            TableName = "Bahçe 2"
                        },
                        new
                        {
                            RestaurantTableId = 9,
                            Status = false,
                            TableName = "Bahçe 3"
                        },
                        new
                        {
                            RestaurantTableId = 10,
                            Status = false,
                            TableName = "Bahçe 4"
                        },
                        new
                        {
                            RestaurantTableId = 11,
                            Status = false,
                            TableName = "Bahçe 5"
                        },
                        new
                        {
                            RestaurantTableId = 12,
                            Status = false,
                            TableName = "Bahçe 6"
                        },
                        new
                        {
                            RestaurantTableId = 13,
                            Status = false,
                            TableName = "Teras 1"
                        },
                        new
                        {
                            RestaurantTableId = 14,
                            Status = false,
                            TableName = "Teras 2"
                        },
                        new
                        {
                            RestaurantTableId = 15,
                            Status = false,
                            TableName = "Teras 3"
                        },
                        new
                        {
                            RestaurantTableId = 16,
                            Status = false,
                            TableName = "Teras 4"
                        });
                });

            modelBuilder.Entity("EntityLayer.Entities.SocialMedia", b =>
                {
                    b.Property<int>("SocialMediaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SocialMediaId"));

                    b.Property<string>("Icon")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Platform")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("siteUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SocialMediaId");

                    b.ToTable("SocialMedias");

                    b.HasData(
                        new
                        {
                            SocialMediaId = 1,
                            Icon = "facebook",
                            Platform = "facebook",
                            siteUrl = "www.facebook.com"
                        },
                        new
                        {
                            SocialMediaId = 2,
                            Icon = "twitter",
                            Platform = "twitter",
                            siteUrl = "www.twitter.com"
                        },
                        new
                        {
                            SocialMediaId = 3,
                            Icon = "linkedin",
                            Platform = "linkedin",
                            siteUrl = "www.linkedin.com"
                        },
                        new
                        {
                            SocialMediaId = 4,
                            Icon = "instagram",
                            Platform = "instagram",
                            siteUrl = "www.instagram.com"
                        },
                        new
                        {
                            SocialMediaId = 5,
                            Icon = "pinterest",
                            Platform = "pinterest",
                            siteUrl = "www.pinterest.com"
                        });
                });

            modelBuilder.Entity("EntityLayer.Entities.Testimonial", b =>
                {
                    b.Property<int>("TestimonialId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TestimonialId"));

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImgUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WriterName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TestimonialId");

                    b.ToTable("Testimonials");

                    b.HasData(
                        new
                        {
                            TestimonialId = 1,
                            Comment = "Restoranınızın atmosferi gerçekten büyüleyici! Yemekler harikaydı, özellikle deniz ürünleri çok taze ve lezzetliydi. Servis hızlı ve personel çok ilgiliydi. Tekrar gelmek için sabırsızlanıyorum.",
                            ImgUrl = "/images/clientimages/client1.jpg",
                            Status = true,
                            Title = "Harika Atmosfer",
                            WriterName = "Ayşe"
                        },
                        new
                        {
                            TestimonialId = 2,
                            Comment = "Geçen hafta burada ailemle birlikte akşam yemeği yedik ve çok memnun kaldık. Yemeklerin lezzeti harikaydı, özellikle şefin önerdiği ana yemek beni çok güzeldi. Hizmet kalitesi ve personelin güleryüzü ise takdire şayan. Kesinlikle tekrar geleceğiz.",
                            ImgUrl = "/images/clientimages/client2.jpg",
                            Status = true,
                            Title = "Mükemmel Hizmet",
                            WriterName = "Mehmet"
                        },
                        new
                        {
                            TestimonialId = 3,
                            Comment = "Restoranınızın sunduğu manzara gerçekten nefes kesici! Özellikle akşamüstü saatlerinde burada oturmak büyük keyif. Yemeklerin lezzeti de çok başarılıydı. Çalışanlarınızın ilgisi ve servis hızı da memnuniyet vericiydi. Herkese tavsiye ederim.",
                            ImgUrl = "/images/clientimages/client1.jpg",
                            Status = true,
                            Title = "Muhteşem Manzara",
                            WriterName = "Fatma"
                        },
                        new
                        {
                            TestimonialId = 4,
                            Comment = "Arkadaşlarımı buraya getirdim ve hepsi çok memnun kaldı. Özellikle tadı damağımızda kalan tatlılar harikaydı. Restoranınızın ambiansı da çok hoştu, sıcak bir ortam sağlıyorsunuz. Teşekkürler!",
                            ImgUrl = "/images/clientimages/client2.jpg",
                            Status = true,
                            Title = "Özel Bir Deneyim",
                            WriterName = "Ali"
                        },
                        new
                        {
                            TestimonialId = 5,
                            Comment = "Burada yediğimiz yemekler gerçekten ilham vericiydi. Yaratıcı sunumlar ve lezzetli tatlar bizi etkiledi. Servis çok profesyonel ve sıcak bir karşılama aldık. Herkese öneririm!",
                            ImgUrl = "/images/clientimages/client1.jpg",
                            Status = true,
                            Title = "İlham Verici Yemekler",
                            WriterName = "Zeynep"
                        });
                });

            modelBuilder.Entity("EntityLayer.Entities.Basket", b =>
                {
                    b.HasOne("EntityLayer.Entities.Product", "Product")
                        .WithMany("Baskets")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EntityLayer.Entities.RestaurantTable", "RestaurantTable")
                        .WithMany("Baskets")
                        .HasForeignKey("RestaurantTableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("RestaurantTable");
                });

            modelBuilder.Entity("EntityLayer.Entities.OrderDetail", b =>
                {
                    b.HasOne("EntityLayer.Entities.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EntityLayer.Entities.Product", "Product")
                        .WithMany("OrderDetails")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("EntityLayer.Entities.Product", b =>
                {
                    b.HasOne("EntityLayer.Entities.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("EntityLayer.Entities.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("EntityLayer.Entities.Order", b =>
                {
                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("EntityLayer.Entities.Product", b =>
                {
                    b.Navigation("Baskets");

                    b.Navigation("OrderDetails");
                });

            modelBuilder.Entity("EntityLayer.Entities.RestaurantTable", b =>
                {
                    b.Navigation("Baskets");
                });
#pragma warning restore 612, 618
        }
    }
}
